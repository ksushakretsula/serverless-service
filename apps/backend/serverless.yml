# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: kretsula
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: spacebring
# "service" is the name of this project. This will also be added to your AWS resource names.
service: shop

plugins:
  - serverless-plugin-monorepo

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    PRODUCTS_TABLE: ProductsTableV2
    ORDERS_TABLE: OrdersTable
    JWT_SECRET: ${env:JWT_SECRET, 'super-secret-jwt-key-change-in-production'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.PRODUCTS_TABLE}
        - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.ORDERS_TABLE}

    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: "*"

functions:
  # --- AUTH ---
  jwtAuthorizer:
    handler: authorizers/jwtAuthorizer.handler
  generateToken:
    handler: authorizers/generateToken.handler
    events:
      - http:
          path: /auth/token
          method: get
          cors: true

  # --- PRODUCTS ---
  createProduct:
    handler: handlers/products/create.createProduct
    events:
      - http:
          path: products
          method: post
          authorizer: jwtAuthorizer
          cors: true
  getProduct:
    handler: handlers/products/get.getProduct
    events:
      - http:
          path: products/{category}/{id}
          method: get
          cors: true
  updateProduct:
    handler: handlers/products/update.updateProduct
    events:
      - http:
          path: products/{category}/{id}
          method: put
          authorizer: jwtAuthorizer
          cors: true
  deleteProduct:
    handler: handlers/products/delete.deleteProduct
    events:
      - http:
          path: products/{category}/{id}
          method: delete
          authorizer: jwtAuthorizer
          cors: true
  listProducts:
    handler: handlers/products/list.listProducts
    events:
      - http:
          path: products
          method: get
          cors: true

  # --- ORDERS ---
  createOrder:
    handler: handlers/orders/createOrder.createOrder
    events:
      - http:
          path: orders
          method: post
          authorizer: jwtAuthorizer
          cors: true
  
  getOrder:
    handler: handlers/orders/getOrder.getOrder
    events:
      - http:
          path: orders/{id}
          method: get
          cors: true

  updateOrder:
    handler: handlers/orders/updateOrder.updateOrder
    events:
      - http:
          path: orders/{id}
          method: put
          authorizer: jwtAuthorizer
          cors: true

  deleteOrder:
    handler: handlers/orders/deleteOrder.deleteOrder
    events:
      - http:
          path: orders/{id}
          method: delete
          authorizer: jwtAuthorizer
          cors: true

  listOrders:
    handler: handlers/orders/listOrders.listOrders
    events:
      - http:
          path: orders
          method: get
          cors: true

  # --- EVENTBRIDGE CONSUMER ---
  updateProductOnOrder:
    handler: handlers/orders/updateProductOnOrder.updateProductOnOrder
    events:
      - eventBridge:
          pattern:
            source:
              - "order.service"
            detail-type:
              - "order.created"
              - "order.updated"
              - "order.deleted"

resources:
  Resources:
    # --- PRODUCTS TABLE ---
    ProductsTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTableV2
        AttributeDefinitions:
          - AttributeName: category
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: category # Partition key
            KeyType: HASH
          - AttributeName: id       # Sort key
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # --- ORDERS TABLE ---
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrdersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id # Partition key (simple key)
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
